/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

import java.util.Arrays;

class Solution {
  public TreeNode constructMaximumBinaryTree(int[] nums) {
    if (nums.length == 0) {
      return null;
    } else if (nums.length == 1) {
      return new TreeNode(nums[0]);
    }
    int max = 0;
    int index = 0;
    for (int j = 0; j < nums.length; j++) {
      if (nums[j] > max) {
        max = nums[j];
        index = j;
      }
    }
    TreeNode root = new TreeNode(max);
    root.left = constructMaximumBinaryTree(Arrays.copyOfRange(nums, 0, index));
    root.right = constructMaximumBinaryTree(Arrays.copyOfRange(nums, index + 1, nums.length));
    return root;
  }
}
